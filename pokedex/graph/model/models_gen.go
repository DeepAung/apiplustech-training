// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Pokemon struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Category    string        `json:"category"`
	Types       []PokemonType `json:"types"`
	Abilities   []string      `json:"abilities"`
}

type PokemonInput struct {
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Category    string        `json:"category"`
	Types       []PokemonType `json:"types"`
	Abilities   []string      `json:"abilities"`
}

type Query struct {
}

type PokemonType string

const (
	PokemonTypeBug      PokemonType = "BUG"
	PokemonTypeDragon   PokemonType = "DRAGON"
	PokemonTypeFairy    PokemonType = "FAIRY"
	PokemonTypeFire     PokemonType = "FIRE"
	PokemonTypeGhost    PokemonType = "GHOST"
	PokemonTypeGround   PokemonType = "GROUND"
	PokemonTypeNormal   PokemonType = "NORMAL"
	PokemonTypePsychic  PokemonType = "PSYCHIC"
	PokemonTypeSteel    PokemonType = "STEEL"
	PokemonTypeDark     PokemonType = "DARK"
	PokemonTypeElectric PokemonType = "ELECTRIC"
	PokemonTypeFighting PokemonType = "FIGHTING"
	PokemonTypeFlying   PokemonType = "FLYING"
	PokemonTypeGrass    PokemonType = "GRASS"
	PokemonTypeIce      PokemonType = "ICE"
	PokemonTypePoison   PokemonType = "POISON"
	PokemonTypeRock     PokemonType = "ROCK"
	PokemonTypeWater    PokemonType = "WATER"
)

var AllPokemonType = []PokemonType{
	PokemonTypeBug,
	PokemonTypeDragon,
	PokemonTypeFairy,
	PokemonTypeFire,
	PokemonTypeGhost,
	PokemonTypeGround,
	PokemonTypeNormal,
	PokemonTypePsychic,
	PokemonTypeSteel,
	PokemonTypeDark,
	PokemonTypeElectric,
	PokemonTypeFighting,
	PokemonTypeFlying,
	PokemonTypeGrass,
	PokemonTypeIce,
	PokemonTypePoison,
	PokemonTypeRock,
	PokemonTypeWater,
}

func (e PokemonType) IsValid() bool {
	switch e {
	case PokemonTypeBug, PokemonTypeDragon, PokemonTypeFairy, PokemonTypeFire, PokemonTypeGhost, PokemonTypeGround, PokemonTypeNormal, PokemonTypePsychic, PokemonTypeSteel, PokemonTypeDark, PokemonTypeElectric, PokemonTypeFighting, PokemonTypeFlying, PokemonTypeGrass, PokemonTypeIce, PokemonTypePoison, PokemonTypeRock, PokemonTypeWater:
		return true
	}
	return false
}

func (e PokemonType) String() string {
	return string(e)
}

func (e *PokemonType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PokemonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PokemonType", str)
	}
	return nil
}

func (e PokemonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PokemonType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PokemonType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
