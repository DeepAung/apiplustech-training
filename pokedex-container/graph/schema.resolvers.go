package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"strconv"

	"github.com/DeepAung/apiplustech-training/pokedex/graph/model"
)

// CreatePokemon is the resolver for the createPokemon field.
func (r *mutationResolver) CreatePokemon(ctx context.Context, input model.PokemonInput) (*model.Pokemon, error) {
	return r.repo.CreatePokemon(ctx, input)
}

// UpdatePokemon is the resolver for the updatePokemon field.
func (r *mutationResolver) UpdatePokemon(ctx context.Context, id string, input model.PokemonInput) (*model.Pokemon, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, InvalidIntError
	}

	return r.repo.UpdatePokemon(ctx, int64(intId), input)
}

// DeletePokemon is the resolver for the deletePokemon field.
func (r *mutationResolver) DeletePokemon(ctx context.Context, id string) (bool, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return false, InvalidIntError
	}

	return r.repo.DeletePokemon(ctx, int64(intId))
}

// Pokemons is the resolver for the pokemons field.
func (r *queryResolver) Pokemons(ctx context.Context) ([]*model.Pokemon, error) {
	return r.repo.ListPokemons(ctx)
}

// PokemonByID is the resolver for the pokemonByID field.
func (r *queryResolver) PokemonByID(ctx context.Context, id string) (*model.Pokemon, error) {
	intId, err := strconv.Atoi(id)
	if err != nil {
		return nil, InvalidIntError
	}

	return r.repo.GetPokemonByID(ctx, int64(intId))
}

// PokemonByName is the resolver for the pokemonByName field.
func (r *queryResolver) PokemonByName(ctx context.Context, name string) (*model.Pokemon, error) {
	return r.repo.GetPokemonByName(ctx, name)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
