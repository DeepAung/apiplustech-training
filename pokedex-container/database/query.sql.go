// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
)

const createPokemon = `-- name: CreatePokemon :one
INSERT INTO pokemons (name, description, category, types, abilities)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, category, types, abilities
`

type CreatePokemonParams struct {
	Name        string
	Description string
	Category    string
	Types       []byte
	Abilities   []byte
}

func (q *Queries) CreatePokemon(ctx context.Context, arg CreatePokemonParams) (Pokemon, error) {
	row := q.db.QueryRow(ctx, createPokemon,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Types,
		arg.Abilities,
	)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Types,
		&i.Abilities,
	)
	return i, err
}

const deletePokemon = `-- name: DeletePokemon :exec
DELETE FROM pokemons WHERE id = $1
`

func (q *Queries) DeletePokemon(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePokemon, id)
	return err
}

const getPokemonByID = `-- name: GetPokemonByID :one
SELECT id, name, description, category, types, abilities FROM pokemons WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPokemonByID(ctx context.Context, id int32) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemonByID, id)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Types,
		&i.Abilities,
	)
	return i, err
}

const getPokemonByName = `-- name: GetPokemonByName :one
SELECT id, name, description, category, types, abilities FROM pokemons WHERE name = $1 LIMIT 1
`

func (q *Queries) GetPokemonByName(ctx context.Context, name string) (Pokemon, error) {
	row := q.db.QueryRow(ctx, getPokemonByName, name)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Types,
		&i.Abilities,
	)
	return i, err
}

const listPokemons = `-- name: ListPokemons :many
SELECT id, name, description, category, types, abilities FROM pokemons
`

func (q *Queries) ListPokemons(ctx context.Context) ([]Pokemon, error) {
	rows, err := q.db.Query(ctx, listPokemons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pokemon
	for rows.Next() {
		var i Pokemon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Types,
			&i.Abilities,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePokemon = `-- name: UpdatePokemon :one
UPDATE pokemons SET
name = $2, description = $3, category = $4, types = $5, abilities = $6
WHERE id = $1
RETURNING id, name, description, category, types, abilities
`

type UpdatePokemonParams struct {
	ID          int32
	Name        string
	Description string
	Category    string
	Types       []byte
	Abilities   []byte
}

func (q *Queries) UpdatePokemon(ctx context.Context, arg UpdatePokemonParams) (Pokemon, error) {
	row := q.db.QueryRow(ctx, updatePokemon,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Types,
		arg.Abilities,
	)
	var i Pokemon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Types,
		&i.Abilities,
	)
	return i, err
}
